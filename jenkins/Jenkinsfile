pipeline{
    agent any
    environment{
        dockertoken=credentials("docker-token")
        rollback=false
    }
    parameters{
        string(name: 'voteChartVersion', defaultValue: '', description: 'vote helm chart version')
        string(name: 'workerChartVersion', defaultValue: '', description: 'worker helm chart version')
        string(name: 'resultChartVersion', defaultValue: '', description: 'result helm chart version')
        //user specific revision to rollback to
        string(name: 'rollBackToRevision', defaultValue: '', description: 'vote-app-chart revision')
    }

    stages{
        stage('Package/Push chart'){

            steps{
                sh """
                git branch -D main
                git checkout -b main
                """
                script{
                    if (params.voteChartVersion !="") {
                        sh """
                        cp ./chart/Chart.yaml chart.yaml.tmp && sed -e '/helm_vote/ {' -e 'n; /^\\([[:space:]]*version: \\).*/s//\\1${params.voteChartVersion}/' -e '}' < chart.yaml.tmp >./chart/Chart.yaml && rm -f chart.yaml.tmp
                        """
                    } else if (params.workerChartVersion !="") {
                        sh """
                        cp ./chart/Chart.yaml chart.yaml.tmp && sed -e '/helm_worker/ {' -e 'n; /^\\([[:space:]]*version: \\).*/s//\\1${params.workerChartVersion}/' -e '}' < chart.yaml.tmp >./chart/Chart.yaml && rm -f chart.yaml.tmp
                        """
                    } else if (params.resultChartVersion !="") {
                        sh """
                        cp ./chart/Chart.yaml chart.yaml.tmp && sed -e '/helm_result/ {' -e 'n; /^\\([[:space:]]*version: \\).*/s//\\1${params.resultChartVersion}/' -e '}' < chart.yaml.tmp >./chart/Chart.yaml && rm -f chart.yaml.tmp
                        """
                    }
                    else{
                        echo 'logic to abort the job'
                    }
                    sh """
                    helm dependency update ./chart/
                    cp ./chart/Chart.yaml chart.yaml.tmp && sed -e '/type:/ {' -e 'n; /^\\([[:space:]]*version: \\).*/s//\\10.${BUILD_NUMBER}.0/' -e '}' < chart.yaml.tmp >./chart/Chart.yaml && rm -f chart.yaml.tmp
                    helm package ./chart/
                    echo \${dockertoken} | helm registry login registry-1.docker.io -u vikasharya000 --password-stdin
                    helm push voting_app_chart-0.\${BUILD_NUMBER}.0.tgz oci://registry-1.docker.io/vikasharya000
                    """
                }
            }
        }
        stage('update git repo'){
            steps{
                sshagent (['git-ssh']) {
                    sh """
                    git config --global user.email "vikash.arya@thoughtworks"
                    git config --global user.name "vikasharya00"
                    git branch
                    git remote set-url origin git@github.com:vikasharya00/voting-app-chart.git
                    git add .
                    git status
                    git commit -m"update chart.yaml"
                    git push -u origin main
                    """
                }
            }
        }
        stage ('deploy helm chart'){
            steps{
                script{
                    def currentSlot
                    def newSlot
                    kubeconfig(credentialsId: 'kubeconfig') {
                        if (params.voteChartVersion !="") {//triggered by vote pipeline
                            def voteChartVersion=params.voteChartVersion
                            currentSlot=sh(script: "kubectl get svc vote-service -o yaml | grep -i slot | awk -F ' ' '{print \$2}'",returnStdout: true)
                            currentSlot=currentSlot.trim()
                            if (currentSlot.length()==0){
                                currentSlot="green"
                            }
                            if (currentSlot == "blue"){
                                newSlot="green"
                                echo "newSlot: $newSlot"
                            }else{
                                newSlot="blue"
                                echo "newSlot: $newSlot"
                            }
                            sh"""
                            voteversion=\$(echo $voteChartVersion | cut -d'.' -f2)
                            helm upgrade --install vote-app-chart oci://registry-1.docker.io/vikasharya000/voting_app_chart --version 0.${BUILD_NUMBER}.0  --set helm_vote.${newSlot}.image=vikasharya000/vote:\${voteversion} --reuse-values
                            helm upgrade vote-app-chart oci://registry-1.docker.io/vikasharya000/voting_app_chart --version 0.${BUILD_NUMBER}.0  --set helm_vote.productionSlot=${newSlot} --reuse-values
                            """
                        } else if (params.workerChartVersion !="") {//triggered by worker pipeline
                            def workerChartVersion=params.workerChartVersion
                            sh"""
                            workerversion=\$(echo $workerChartVersion | cut -d'.' -f2)
                            helm upgrade --install vote-app-chart oci://registry-1.docker.io/vikasharya000/voting_app_chart --version 0.${BUILD_NUMBER}.0  --set helm_worker.image=vikasharya000/worker:\${workerversion} --reuse-values
                            """

                        } else if (params.resultChartVersion !="") {//triggered by result pipeline
                            def resultChartVersion=params.resultChartVersion
                            currentSlot=sh(script: "kubectl get svc result -o yaml | grep -i slot | awk -F ' ' '{print \$2}'",returnStdout: true)
                            currentSlot=currentSlot.trim()
                            if (currentSlot.length()==0){
                                currentSlot="green"
                            }
                            if (currentSlot == "blue"){
                                newSlot="green"
                                echo "newSlot: $newSlot"
                            }else{
                                newSlot="blue"
                                echo "newSlot: $newSlot"
                            }
                            sh"""
                            resultversion=\$(echo $resultChartVersion | cut -d'.' -f2)
                            helm upgrade --install vote-app-chart oci://registry-1.docker.io/vikasharya000/voting_app_chart --version 0.${BUILD_NUMBER}.0  --set helm_result.${newSlot}.image=vikasharya000/result:\${resultversion} --reuse-values
                            helm upgrade vote-app-chart oci://registry-1.docker.io/vikasharya000/voting_app_chart --version 0.${BUILD_NUMBER}.0  --set helm_result.productionSlot=${newSlot} --reuse-values
                            """
                        }
                        else{
                            echo "nothing passed, no dependencies to update"
                        }
                        sh"""
                        sleep 30
                        """
                    }
                }
            }
        }
        stage ("service healthcheck"){
            steps{
                script{
                    def status
                    kubeconfig(credentialsId: 'kubeconfig') {
                        status=sh (script: "curl -I vote-app-chart/vote | grep -i HTTP | awk -F ' ' '{print \$2}'",returnStdout: true)
                        echo "${status}"
                    }
                    rollback=true
                    if (!status.contains("200")){
                        echo "service check did not sent status code 200"
                        echo "proceeding with rollback"
                        rollback=true
                        echo "${rollback}"
                    }

                }
            }
        }
        stage ("rollback"){
            when {
                expression {
                    return rollback==true;
                }
            }
            steps{
                script{
                    def rollBackToRevision=params.rollBackToRevision
                    def revision
                    kubeconfig(credentialsId: 'kubeconfig') {
                        if(params.rollBackToRevision==""){
                            def build_no=env.BUILD_NUMBER as int
                            echo "$build_no"
                            build_no=build_no-1
                           revision=sh (script: "helm history vote-app-chart | grep -i '0.${build_no}.0' | tail -1 | awk -F ' ' '{print \$1}'",returnStdout: true)
                           echo "$revision"
                           sh """
                           helm rollback vote-app-chart ${revision}
                           """
                        }else{
                            sh """
                           helm rollback vote-app-chart ${rollBackToRevision}
                           """
                        }
                    }
                }
            }
        }
    }
}
//only config changes.
//canary deployment
//test blue green with updated code.
//secret vault

//what if rollback to specific version
